#! /usr/bin/env perl
# vim: ts=4 sw=4 expandtab nosmarttab
#
# vw generic optimal parameter golden-section search
#   http://en.wikipedia.org/wiki/Golden_section_search
#
# Call without parameters for a full usage message
#
# Paul Mineiro ('vowpalwabbit/demo') wrote the original script
#
# Ariel Faigon (2013)
#   - Generalize, refactor
#   - Add usage message
#   - Add tolerance as optional parameter
#   - Add documentation
#   - Golden-section search bug-fix
#   - Better error messages in case underlying command fails
#     for any reason
#
use warnings;
use strict;
use Scalar::Util qw(looks_like_number);

#
# ExecCmd(cmd, timeout)
#  cmd     - a command or reference to an array of command + arguments
#  timeout - number of seconds to wait (0 = forever)
#
# returns:
#   In case of success:
#       cmd results (STDERR and STDOUT merged into an array ref)
#
#   In case of any failure:
#       (timeout, death from signal, non-zero exit status,
#        failure of fork or exec, ...)
#       print a user-helpful error message and abort
#
sub ExecCmd {
    my $cmd = shift || return(0, []);
    my $timeout = shift || 0;

    # opening a pipe creates a forked process     
    my $pid = open(my $pipe, '-|');
    die "Can't fork: $!\n" unless defined $pid;

    if ($pid) {     # parent

        my @result = ();

        if ($timeout) {
            my $failed = 1;
            eval {
                # set a signal to die if the timeout is reached
                local $SIG{ALRM} = sub { die "alarm\n" };
                alarm $timeout;
                @result = <$pipe>;
                alarm 0;
                $failed = 0;
            };
            die "command timeout. Result so far:\n@result\n" if $failed;

        } else {
            while (<$pipe>) {
                push @result, $_;
                print STDERR ".";
            }
        }
        close($pipe);

        my $exitcode = $? >> 8;
        my $signal = $? & 127;
        my $core = ($? & 128) ? ' (core dumped)' : '';

        if ($signal) {
            warn "\n\t@$cmd died from signal $signal$core\n";
            die "Try to run:\n\t@$cmd\nmanually to figure out why.\n";
        } elsif ($exitcode) {
            warn "\n\t@$cmd failed: (exitcode=$exitcode)\n";
            warn "Output from @$cmd is:\n@result\n";
            warn "You may try to run:\n\t@$cmd\nmanually to figure out why.\n"
                unless (@result);
            exit 1;
        }
        # return exit status, command output
        return \@result;
    }

    # Child...
    no warnings;

    # redirect STDERR to STDOUT
    open(STDERR, '>&STDOUT');

    # exec transfers control of the process to the command
    ref($cmd) eq 'ARRAY' ? exec(@$cmd) : exec($cmd);

    # this code will not execute unless exec fails!
    die "$0: can't exec '@$cmd': $!";
}

#
# loss(param)
#   Input:
#       @ARGV - A vw command where the parameter we want to optimize
#               for appears as a '%' placeholder
#       param - Value for parameter for which we check the loss
#
#   Returns the vw average loss for the vw command @ARGV with '%'
#       set to param value
#
my %Loss;   # x -> f(x) cache
my $BestParam;
my $BestLoss = 1e100;

sub loss($) {
    my ($param) = @_;

    return  $Loss{$param} if (exists $Loss{$param});

    printf STDERR "trying %.5g ", $param;

    my @command = @ARGV;
    foreach my $c (@command) {
        $c =~ s/%/$param/g;
    }

    my $rv = ExecCmd \@command;

    my $loss;
    my $best_msg = '';

    foreach my $line (@$rv) {
        next unless $line =~ /^average loss\s*=\s*([0-9.]+)/;
        $loss = $1;
        if ($loss <= $BestLoss) {
            $BestParam = $param;
            $BestLoss = $loss;
            $best_msg = ' (best)';
        }
    }

    die "\n$0: failed to parse average loss from vw output: ",
        join('', @$rv),
        "\n\nTry to run:\n\t@command\nmanually to figure out why.\n"
            unless defined ($loss);

    printf STDERR " %.6g%s\n", $loss, $best_msg;
    $Loss{$param} = $loss;      # cache it
    $loss;
}

#
# argmin3($$$$$$$)
#   Given 3 value pairs: (arg, loss)  as a six-tuple
#   returns the pair for which the loss is the smallest
#
sub argmin3 ($$$$$$) {
    my ($a, $fa, $b, $fb, $c, $fc) = @_;

    if ($fa < $fb) {
        return $fa < $fc ? ($a, $fa) : ($c, $fc);
    }
    # else:
    return $fb < $fc ? ($b, $fb) : ($c, $fc);
}

sub usage(@) {
    print STDERR @_, "\n" if @_;

    die "Usage: $0 <lower_bound> <upper_bound> [tolerance] vw-command...

    lower_bound     lower bound of the parameter search range
    upper_bound     upper bound of the parameter search range
    tolerance       termination condition for optimal parameter search
                    expressed as an improvement fraction of the range

    vw-command ...  a vw command to repeat in a loop until optimum
                    is found, where '%' is used as a placeholder
                    for the optimized parameter
"
}

my $Phi = (1.0 + sqrt (5.0)) / 2.0;
my $ResPhi = 2.0 - $Phi;

sub goldenSectionSearch($$$$);

sub goldenSectionSearch($$$$) {
    my ($low, $mid, $high, $tau) = @_;

    my $x;

    my $upper_range = $high - $mid;
    my $lower_range = $mid - $low;
    if ($upper_range > $lower_range) {
        $x = $mid + $ResPhi * $upper_range;
    } else {
        $x = $mid - $ResPhi * $lower_range;
    }

    if (abs($high - $low) < $tau * (abs($mid) + abs($x))) {
        return (($high + $low) / 2.0);
    }

    # assert(loss($x) != loss($mid));
    if (loss($x) == loss($mid)) {
        printf STDERR "%s: loss(%g) == loss(%g): %g\n",
                            $0, $x, $mid, loss($x);
        return (($x + $mid) / 2.0);
    }

    if (loss($x) < loss($mid)) {
        if ($upper_range > $lower_range) {
            return goldenSectionSearch($mid, $x, $high, $tau)
        } else {
            return goldenSectionSearch($low, $x, $mid, $tau);
        }
    }

    # else:
    if ($upper_range > $lower_range) {
        return goldenSectionSearch($low, $mid, $x, $tau);
    }
    # else
    return goldenSectionSearch($x, $mid, $high, $tau);
}

#
# best_hyperparam(lower_bound, upper_bound, tolerance)
#
#   performs golden-ratio section search between lower_bound
#   and upper_bound for the best parameter (lowest loss)
#
#   Termination condition is difference is less than tolerance
#   of the [lower .. upper] range.
#
sub best_hyperparam($$$) {
    my ($lb, $ub, $tol) = @_;
    my $mid = $lb + $ResPhi * ($ub - $lb);

    my $best = goldenSectionSearch($lb, $mid, $ub, $tol);
    my $fbest = loss($best);

    # Still happens that what we finally return is not the best...
    if ($BestLoss < $fbest) {
        $best = $BestParam;
        $fbest = $BestLoss;
    }
    ($best, $fbest);
}

sub fullpath($) {
    my $exe = shift;
    foreach my $dir (split(':', $ENV{PATH})) {
        my $fp = "$dir/$exe";
        return $fp if (-x $fp);
    }
    '';
}

sub process_args {
    $0 =~ s{.*/}{};

    usage("Too few arguments...")
        unless (@ARGV > 2);

    usage("1st argument: $ARGV[0]: expecting a number")
        unless (looks_like_number($ARGV[0]));

    usage("2nd argument: $ARGV[1]: expecting a number")
        unless (looks_like_number($ARGV[1]));

    my $lower_bound = shift @ARGV;
    my $upper_bound = shift @ARGV;

    my $tolerance = 0.01;
    if (looks_like_number($ARGV[0])) {
        $tolerance = shift @ARGV;
        usage("3rd argument (tolerance): $tolerance: not in the (0, 1) range")
            unless (0 < $tolerance and $tolerance < 1.0);
    }
    usage("command: $ARGV[0]: must start with an executable")
        unless (-x $ARGV[0] || -x (fullpath($ARGV[0])));

    usage("command '@ARGV': must include a '%' wildcard to optimize on")
        unless ("@ARGV" =~ /%/);

    return ($lower_bound, $upper_bound, $tolerance);
}

# -- main
my ($lower_bound, $upper_bound, $tolerance) = process_args();
my ($best, $fbest) = best_hyperparam($lower_bound, $upper_bound, $tolerance);

printf "%g\t%g\n", $best, $fbest;

